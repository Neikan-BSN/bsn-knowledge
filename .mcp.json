{
  "mcpServers": {
    "filesystem": {
      "type": "stdio",
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-filesystem",
        "/home/user01/projects/bsn_knowledge"
      ],
      "env": {},
      "description": "File system operations with secure read/write access",
      "category": "core",
      "status": "operational"
    },
    "git": {
      "type": "stdio",
      "command": "npx",
      "args": [
        "-y",
        "@cyanheads/git-mcp-server"
      ],
      "env": {},
      "description": "Git version control operations (clone, commit, branch, diff, log, status, push, pull, merge)",
      "category": "core",
      "status": "operational"
    },
    "memory": {
      "type": "stdio",
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-memory"
      ],
      "env": {},
      "description": "Knowledge graph and memory operations for context persistence",
      "category": "core",
      "status": "operational"
    },
    "context7": {
      "type": "stdio",
      "command": "npx",
      "args": [
        "-y",
        "@upstash/context7-mcp"
      ],
      "env": {},
      "description": "AI documentation search and context management with Upstash integration",
      "category": "core",
      "status": "operational"
    },
    "ripgrep": {
      "type": "stdio",
      "command": "npx",
      "args": [
        "-y",
        "mcp-ripgrep@latest"
      ],
      "env": {},
      "description": "Fast code search with regex support using ripgrep",
      "category": "core",
      "status": "operational"
    },
    "eslint": {
      "type": "stdio",
      "command": "npx",
      "args": [
        "-y",
        "@eslint/mcp@latest"
      ],
      "env": {},
      "description": "JavaScript/TypeScript code quality analysis and linting",
      "category": "core",
      "status": "operational"
    },
    "fetch": {
      "type": "stdio",
      "command": "npx",
      "args": [
        "-y",
        "@tokenizin/mcp-npx-fetch"
      ],
      "env": {},
      "description": "HTTP requests and web scraping capabilities",
      "category": "extended",
      "status": "operational"
    },
    "sequential-thinking": {
      "type": "stdio",
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-sequential-thinking"
      ],
      "env": {},
      "description": "Sequential reasoning and complex problem-solving workflows",
      "category": "extended",
      "status": "operational"
    },
    "playwright": {
      "type": "stdio",
      "command": "npx",
      "args": [
        "-y",
        "@automatalabs/mcp-server-playwright"
      ],
      "env": {},
      "description": "Browser automation and web testing with Playwright",
      "category": "extended",
      "status": "operational"
    },
    "codanna": {
      "type": "stdio",
      "command": "/home/user01/.local/bin/codanna",
      "args": [
        "serve"
      ],
      "env": {},
      "description": "Local Codanna AI assistant server with stdio transport",
      "category": "local",
      "status": "operational"
    },
    "github": {
      "type": "stdio",
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-github"
      ],
      "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": "${GITHUB_PERSONAL_ACCESS_TOKEN}"
      },
      "description": "GitHub repository management, issues, PRs, workflows, and collaboration",
      "category": "integration",
      "status": "operational"
    }
  },
  "template_metadata": {
    "version": "2.0.0",
    "created": "2025-08-25",
    "description": "Master configuration template for all 11 operational MCP servers in the expanded ecosystem deployment",
    "total_servers": 11,
    "server_breakdown": {
      "stdio_servers": 11,
      "sse_servers": 0,
      "core_servers": 6,
      "extended_servers": 3,
      "local_servers": 1,
      "integration_servers": 2
    },
    "path_parameterization": {
      "placeholder": "/home/user01/projects/bsn_knowledge",
      "description": "Replace with absolute project path during deployment",
      "example": "/home/user01/projects/slicer-v2-reformed"
    },
    "new_servers": {
      "github": {
        "package": "@modelcontextprotocol/server-github",
        "secrets": [
          "GITHUB_PERSONAL_ACCESS_TOKEN"
        ],
        "capabilities": [
          "repository_management",
          "issues",
          "pull_requests",
          "workflows",
          "collaboration"
        ]
      }
    },
    "deployment_instructions": [
      "1. Replace /home/user01/projects/bsn_knowledge with actual project directory path",
      "2. Configure Doppler secrets for all new integration servers",
      "3. Verify GitHub Personal Access Token has required permissions",
      "4. Validate all 11 servers individually before full deployment",
      "5. Update MCP coordinator to handle expanded server count"
    ],
    "doppler_secrets_required": {
      "github": [
        "GITHUB_PERSONAL_ACCESS_TOKEN"
      ]
    },
    "verified_packages": {
      "@modelcontextprotocol/server-filesystem": "2025.7.29",
      "@cyanheads/git-mcp-server": "2.3.2",
      "@modelcontextprotocol/server-memory": "2025.8.4",
      "@upstash/context7-mcp": "1.0.14",
      "mcp-ripgrep": "0.4.0",
      "@eslint/mcp": "latest",
      "@tokenizin/mcp-npx-fetch": "latest",
      "@modelcontextprotocol/server-sequential-thinking": "latest",
      "@automatalabs/mcp-server-playwright": "latest",
      "@modelcontextprotocol/server-github": "2025.4.8"
    },
    "operational_status": {
      "all_servers_tested": true,
      "startup_time_requirement": "<3 seconds",
      "memory_usage": "minimal overhead",
      "error_handling": "graceful degradation",
      "maintenance_schedule": "weekly package updates"
    },
    "integration_categories": {
      "core": "Essential development servers (6 servers)",
      "extended": "Enhanced functionality servers (3 servers)",
      "local": "Local development tools (1 server)",
      "integration": "External service integration servers (2 servers)"
    },
    "quality_gates": {
      "package_verification": "All 11 packages verified in npm registry",
      "secret_management": "Doppler integration for all sensitive credentials",
      "integration_testing": "All servers tested and validated individually",
      "documentation_accuracy": "Reality-based configuration documentation",
      "zero_functionality_loss": "All claimed functionality available and tested"
    }
  }
}