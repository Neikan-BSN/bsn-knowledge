# Minimal Workflow Template
# ~80-100 lines, <3 min execution, basic validation
# For simpler projects like ARES and BSN-Knowledge

name: Minimal CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'pyproject.toml'
      - '.github/workflows/**'
  pull_request:
    branches: [main]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'pyproject.toml'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  PROJECT_NAME: 'bsn-knowledge'
  
jobs:
  # Quick validation and testing
  validate_and_test:
    name: Validate & Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install UV Package Manager
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          
      - name: Install Dependencies
        run: |
          uv sync --all-extras
          
      - name: Code Quality Check
        run: |
          # Basic formatting and linting
          uv run black --check src/ tests/ || echo "Format issues detected"
          uv run ruff check src/ tests/ || echo "Lint issues detected"
          
      - name: Type Checking
        run: |
          uv run mypy src/ || echo "Type issues detected"
          
      - name: Basic Security Scan
        run: |
          uv run bandit -r src/ -f json -o bandit-report.json || echo "Security findings detected"
          
      - name: Run Tests
        run: |
          uv run pytest tests/ -v --tb=short --cov=src --cov-report=xml
          
      - name: Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          
      - name: Upload Security Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-report-${{ env.PROJECT_NAME }}
          path: bandit-report.json
          retention-days: 30
          
  # Basic Docker validation (if Dockerfile exists)
  docker_check:
    name: Docker Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: hashFiles('Dockerfile') != ''
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Docker Build Test
        run: |
          docker build --no-cache -t ${{ env.PROJECT_NAME }}:test .
          echo "Docker build successful"
          
      - name: Container Security Scan
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image ${{ env.PROJECT_NAME }}:test || echo "Container security findings detected"