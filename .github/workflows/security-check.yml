# Security Pipeline Template - Lightweight Security Focused CI/CD
# Extracted from RAGnostic analysis - Practical security protection
# Template Version: 1.0 - Development-friendly security patterns
# Customized for BSN Knowledge - Knowledge Base System

name: üîí Security Pipeline

on:
  push:
    branches: [main, develop, feature/*, hotfix/*]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
  schedule:
    # Run security scans weekly on main branch
    - cron: '0 2 * * 1'

env:
  PYTHON_VERSION: '3.12'
  UV_VERSION: '0.8.3'

permissions:
  contents: read
  security-events: write
  pull-requests: write

jobs:
  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        scanner: [bandit, safety, secrets, knowledge-base]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python & UV
        uses: astral-sh/setup-uv@v4
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true

      - name: Install Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install Dependencies
        run: |
          uv sync
          # Install security scanning tools
          uv add bandit[toml] safety detect-secrets

      - name: Run Bandit Security Scan
        if: matrix.scanner == 'bandit'
        run: |
          echo "üîç Running Bandit security analysis..."
          mkdir -p reports/security
          
          # Generate SARIF report for GitHub Security tab
          uv run bandit -r src/ tests/ \
            -f sarif -o reports/security/bandit-report.sarif || exit_code=$?
          
          # Generate JSON report for analysis
          uv run bandit -r src/ tests/ \
            -f json -o reports/security/bandit-report.json || exit_code=$?
          
          # Parse results and enforce security standards
          if [ -f "reports/security/bandit-report.json" ]; then
            high_critical=$(jq '[.results[] | select(.issue_severity == "HIGH" or .issue_severity == "CRITICAL")] | length' reports/security/bandit-report.json)
            medium=$(jq '[.results[] | select(.issue_severity == "MEDIUM")] | length' reports/security/bandit-report.json)
            
            echo "üìä Bandit Security Analysis Results:"
            echo "- HIGH/CRITICAL issues: $high_critical"
            echo "- MEDIUM issues: $medium"
            
            # Fail build on HIGH/CRITICAL issues
            if [ "$high_critical" -gt 0 ]; then
              echo "üö® HIGH/CRITICAL security issues found - build failed"
              jq -r '.results[] | select(.issue_severity == "HIGH" or .issue_severity == "CRITICAL") | "‚ö†Ô∏è \(.filename):\(.line_number) - \(.test_name): \(.issue_text)"' reports/security/bandit-report.json
              exit 1
            fi
            
            if [ "$medium" -gt 0 ]; then
              echo "‚ö†Ô∏è MEDIUM severity issues found - review recommended"
              jq -r '.results[] | select(.issue_severity == "MEDIUM") | "üìù \(.filename):\(.line_number) - \(.test_name): \(.issue_text)"' reports/security/bandit-report.json
            fi
          fi
          echo "‚úÖ Bandit scan completed successfully"

      - name: Run Safety Dependency Scan
        if: matrix.scanner == 'safety'
        run: |
          echo "üõ°Ô∏è Running Safety dependency vulnerability scan..."
          mkdir -p reports/security
          
          # Export dependencies for scanning
          uv export --format requirements-txt > requirements-export.txt
          
          # Run safety check with JSON output
          uv run safety check --file requirements-export.txt \
            --json --output reports/security/safety-report.json || exit_code=$?
          
          # Parse results
          if [ -f "reports/security/safety-report.json" ]; then
            vulnerabilities=$(jq '. | length' reports/security/safety-report.json 2>/dev/null || echo "0")
            
            if [ "$vulnerabilities" -gt 0 ]; then
              echo "üö® Found $vulnerabilities dependency vulnerabilities:"
              jq -r '.[] | "‚ö†Ô∏è \(.package_name) \(.installed_version): \(.vulnerability_id) - \(.advisory)"' reports/security/safety-report.json
              
              # Check severity and fail on critical vulnerabilities
              critical_vulns=$(jq '[.[] | select(.severity == "high" or .severity == "critical")] | length' reports/security/safety-report.json 2>/dev/null || echo "0")
              
              if [ "$critical_vulns" -gt 0 ]; then
                echo "üö® Critical vulnerabilities found - build failed"
                exit 1
              else
                echo "‚ö†Ô∏è Non-critical vulnerabilities found - review recommended"
              fi
            else
              echo "‚úÖ No known vulnerabilities found"
            fi
          else
            echo "‚úÖ No vulnerabilities detected"
          fi

      - name: Run Secrets Detection
        if: matrix.scanner == 'secrets'
        run: |
          echo "üïµÔ∏è Running secrets detection..."
          mkdir -p reports/security
          
          # Initialize secrets baseline if it doesn't exist
          if [ ! -f ".secrets.baseline" ]; then
            echo "üìù Creating initial secrets baseline..."
            uv run detect-secrets scan --all-files \
              --exclude-files ".venv/.*|htmlcov/.*|\.git/.*|node_modules/.*|data/.*" \
              --baseline .secrets.baseline || true
          fi
          
          # Scan for new secrets
          uv run detect-secrets scan --all-files \
            --exclude-files ".venv/.*|htmlcov/.*|\.git/.*|node_modules/.*|data/.*" \
            --baseline .secrets.baseline || exit_code=$?
          
          # Check for potential secrets
          if [ -f ".secrets.baseline" ]; then
            secrets_count=$(jq '.results | to_entries | length' .secrets.baseline 2>/dev/null || echo "0")
            
            if [ "$secrets_count" -gt 0 ]; then
              echo "üö® Potential secrets detected: $secrets_count"
              echo "üìã Review .secrets.baseline and add legitimate values to whitelist"
              
              # Show detected secrets (without revealing values)
              jq -r '.results | to_entries[] | "‚ö†Ô∏è \(.key): \(.value | keys | join(", "))"' .secrets.baseline || true
              
              # In strict mode, fail on any unreviewed secrets
              if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
                echo "üö® Unreviewed secrets detected in main branch - build failed"
                exit 1
              else
                echo "‚ö†Ô∏è Review required before merging to main branch"
              fi
            else
              echo "‚úÖ No secrets detected"
            fi
          fi

      - name: Run Knowledge Base Security Scan
        if: matrix.scanner == 'knowledge-base'
        run: |
          echo "üìö Running knowledge base specific security scan..."
          
          # Check for unencrypted sensitive data patterns in knowledge base
          if grep -r -E "ssn|social.*security|credit.*card|medical.*record|personal.*data" src/ 2>/dev/null; then
            echo "üö® CRITICAL: Potential unencrypted sensitive data patterns found in knowledge base"
            exit 1
          fi
          
          # Check for proper logging (no sensitive data in logs)
          if grep -r -E "print\(.*patient|log.*medical|console.*sensitive" src/ 2>/dev/null; then
            echo "üö® CRITICAL: Potential sensitive data in logging statements"
            exit 1
          fi
          
          # Check for SQL injection vulnerabilities in knowledge base queries
          if grep -r -E "SELECT.*\+.*|INSERT.*\+.*|UPDATE.*\+.*|DELETE.*\+.*" src/ 2>/dev/null | grep -v "test"; then
            echo "‚ö†Ô∏è Potential SQL injection vulnerability - review query construction"
          fi
          
          # Check for proper authentication/authorization in API endpoints
          if [ -d "src/bsn_knowledge/api" ]; then
            if ! grep -r -E "auth|permission|token|secure" src/bsn_knowledge/api/ 2>/dev/null; then
              echo "‚ö†Ô∏è No authentication patterns found in API endpoints - review security"
            fi
          fi
          
          # Check for proper input validation
          if ! grep -r -E "validate|sanitize|escape" src/ 2>/dev/null; then
            echo "‚ö†Ô∏è No input validation patterns found - review data handling"
          fi
          
          echo "‚úÖ Knowledge base security scan completed"

      - name: Upload SARIF Results
        if: always() && matrix.scanner == 'bandit'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/security/bandit-report.sarif
          category: bandit-security-scan

      - name: Upload Security Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-${{ matrix.scanner }}
          path: |
            reports/security/
            .secrets.baseline
          retention-days: 30

  # Container Security (if applicable)
  container-security:
    name: Container Security
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: "contains(github.repository, 'docker') || github.event_name == 'workflow_dispatch'"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 'Knowledge Base Container Security'
        run: |
          echo "üê≥ Running knowledge base container security checks..."
          
          # Check Dockerfile for security best practices
          if [ -f "Dockerfile" ]; then
            echo "üìã Dockerfile security review:"
            
            # Ensure non-root user (critical for knowledge base data)
            if ! grep -q "USER" Dockerfile; then
              echo "üö® CRITICAL: Knowledge base containers must use non-root user"
              exit 1
            fi
            
            # Check for proper data volume handling
            if grep -q "VOLUME" Dockerfile; then
              echo "‚ö†Ô∏è Volume mounts detected - ensure encrypted storage for knowledge base data"
            fi
            
            echo "‚úÖ Knowledge base container security review completed"
          fi

      - name: Basic Container Security Checks
        run: |
          echo "üê≥ Running basic container security checks..."
          
          # Check Dockerfile for security best practices
          if [ -f "Dockerfile" ]; then
            echo "üìã Dockerfile security review:"
            
            # Check for non-root user
            if ! grep -q "USER" Dockerfile; then
              echo "‚ö†Ô∏è Consider adding USER directive for non-root execution"
            fi
            
            # Check for COPY --chown usage
            if grep -q "COPY.*--chown" Dockerfile; then
              echo "‚úÖ Using COPY --chown for proper ownership"
            fi
            
            # Check for HEALTHCHECK
            if ! grep -q "HEALTHCHECK" Dockerfile; then
              echo "‚ö†Ô∏è Consider adding HEALTHCHECK directive"
            fi
            
            echo "‚úÖ Dockerfile security review completed"
          fi
          
          # Check docker-compose.yml security
          if [ -f "docker-compose.yml" ]; then
            echo "üìã Docker Compose security review:"
            
            # Check for privileged containers
            if grep -q "privileged.*true" docker-compose.yml; then
              echo "üö® Privileged containers detected - security risk"
              exit 1
            fi
            
            # Check for host networking
            if grep -q "network_mode.*host" docker-compose.yml; then
              echo "‚ö†Ô∏è Host networking detected - review security implications"
            fi
            
            # Check for volume mounts
            if grep -q "/.*:/.*" docker-compose.yml; then
              echo "üìù Volume mounts detected - review for sensitive data exposure"
            fi
            
            echo "‚úÖ Docker Compose security review completed"
          fi

  # Security Summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [security]
    if: always()
    timeout-minutes: 5
    steps:
      - name: Download Security Reports
        uses: actions/download-artifact@v4

      - name: Generate Security Summary
        run: |
          echo "# üîí BSN Knowledge Security Pipeline Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìä Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "| Scanner | Status | Description |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|-------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Bandit | ${{ contains(needs.security.result, 'success') && '‚úÖ' || '‚ùå' }} | Static Application Security Testing |" >> $GITHUB_STEP_SUMMARY
          echo "| Safety | ${{ contains(needs.security.result, 'success') && '‚úÖ' || '‚ùå' }} | Dependency Vulnerability Scanning |" >> $GITHUB_STEP_SUMMARY
          echo "| Secrets | ${{ contains(needs.security.result, 'success') && '‚úÖ' || '‚ùå' }} | Secrets Detection |" >> $GITHUB_STEP_SUMMARY
          echo "| Knowledge Base | ${{ contains(needs.security.result, 'success') && '‚úÖ' || '‚ùå' }} | Knowledge Base Specific Security |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üõ°Ô∏è Knowledge Base Security Standards" >> $GITHUB_STEP_SUMMARY
          echo "- **SAST Analysis**: Bandit with HIGH/CRITICAL enforcement" >> $GITHUB_STEP_SUMMARY
          echo "- **Dependency Security**: Safety vulnerability scanning" >> $GITHUB_STEP_SUMMARY
          echo "- **Secrets Detection**: detect-secrets with baseline management" >> $GITHUB_STEP_SUMMARY
          echo "- **Data Protection**: Sensitive data pattern detection" >> $GITHUB_STEP_SUMMARY
          echo "- **API Security**: Authentication and authorization validation" >> $GITHUB_STEP_SUMMARY
          echo "- **Input Validation**: Query injection and data sanitization checks" >> $GITHUB_STEP_SUMMARY
          echo "- **Container Security**: Docker security best practices" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìã Knowledge Base Security Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "- Implement proper authentication for all API endpoints" >> $GITHUB_STEP_SUMMARY
          echo "- Use parameterized queries to prevent SQL injection" >> $GITHUB_STEP_SUMMARY
          echo "- Encrypt sensitive knowledge base data at rest and in transit" >> $GITHUB_STEP_SUMMARY
          echo "- Regular security reviews of search and retrieval patterns" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor for unauthorized access to knowledge base content" >> $GITHUB_STEP_SUMMARY

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const security_status = '${{ needs.security.result }}' === 'success' ? '‚úÖ Passed' : '‚ùå Failed';
            
            const comment = `## üîí BSN Knowledge Security Pipeline Results
            
            **Overall Status**: ${security_status}
            
            | Security Check | Status |
            |----------------|--------|
            | Static Analysis (Bandit) | ${security_status} |
            | Dependency Scan (Safety) | ${security_status} |
            | Secrets Detection | ${security_status} |
            | Knowledge Base Security | ${security_status} |
            
            ### üìö Knowledge Base Security Features:
            - üîç Sensitive data pattern detection
            - üõ°Ô∏è API endpoint security validation
            - üîê Input validation and sanitization checks
            - üìù SQL injection vulnerability scanning
            - üèóÔ∏è Container security for knowledge base data
            
            ${security_status.includes('Failed') ? 
              '‚ö†Ô∏è **Action Required**: Please review and address security findings before merging.' : 
              'üéâ **All Security Checks Passed**: Knowledge base is secure and ready for review.'}
            
            üìä **Reports**: Check the Actions tab for detailed security reports and SARIF uploads.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });