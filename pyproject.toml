# bsn-knowledge - BSN Knowledge Base - Educational resource management system
# Standardized UV Workspace pyproject.toml Template v2.0
# Python >=3.12,<3.14 with Hatchling build system - Phase 2 Day 2 Standard

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.hatch.metadata]
allow-direct-references = true

[project]
name = "bsn-knowledge"
version = "1.0.0"
description = "BSN Knowledge Platform - Comprehensive nursing education platform with adaptive learning, clinical decision support, and analytics"
authors = [
    {name = "BSN Knowledge Team", email = "dev@bsn-knowledge.ai"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.12,<3.13"
keywords = ["bsn-knowledge", "python", "ai", "automation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

dependencies = [
    # Core framework (standardized across workspace)
    "fastapi>=0.110.0",
    "uvicorn[standard]>=0.29.0",
    "pydantic[email]>=2.7.0",
    "pydantic-settings>=2.2.0",
    # Authentication & Security
    "pyjwt>=2.8.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.9",
    # Database & Storage
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "asyncpg>=0.29.0",
    "redis>=5.0.0",
    # AI/LLM Integration
    "openai>=1.0.0",
    "tiktoken>=0.5.0",
    # Utilities
    "click>=8.1.7",
    "rich>=13.7.1",
    "pyyaml>=6.0.1",
    "python-dotenv>=1.0.1",
    "structlog>=24.1.0",
    # HTTP clients
    "httpx[http2]>=0.27.0",
    "websockets>=12.0",
    # Minimal library dependencies
    "idna>=3.10",
]

[project.optional-dependencies]
# Core development groups (standardized across workspace)
test = [
    "pytest>=8.1.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "pytest-benchmark>=4.0.0",
    "pytest-timeout>=2.3.1",
    "coverage[toml]>=7.4.0",
    "hypothesis>=6.100.0",
]

format = [
    "ruff>=0.4.0",
]

lint = [
    "ruff>=0.4.0",
    "mypy>=1.10.0",
    "types-requests>=2.31.0",
    "types-pyyaml>=6.0.12",
    "types-redis>=4.6.0",
]

security = [
    "bandit[toml]>=1.7.8",
    "safety>=3.1.0",
    "detect-secrets>=1.5.0",
]

docs = [
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.25.0",
]

dev = [
    "pre-commit>=3.7.0",
]

# Library-specific groups (if any)


# Convenience group that includes everything for development
all = [
    "pytest>=8.1.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "pytest-benchmark>=4.0.0",
    "coverage[toml]>=7.4.0",
    "hypothesis>=6.100.0",
    "ruff>=0.4.0",
    "mypy>=1.10.0",
    "types-requests>=2.31.0",
    "types-pyyaml>=6.0.12",
    "types-redis>=4.6.0",
    "bandit[toml]>=1.7.8",
    "safety>=3.1.0",
    "detect-secrets>=1.5.0",
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.25.0",
    "pre-commit>=3.7.0",
    # No additional dependencies for basic library

]

[project.urls]
Homepage = "https://github.com/user/bsn-knowledge"
Repository = "https://github.com/user/bsn-knowledge"
Issues = "https://github.com/user/bsn-knowledge/issues"
Documentation = "https://user.github.io/bsn-knowledge"

[project.scripts]
bsn-knowledge = "src.api.main:app"

# ================================================================================
# UV CONFIGURATION - CANONICAL VIRTUAL ENVIRONMENT
# ================================================================================
[tool.uv]
managed = true
package = true

dev-dependencies = [
    # Development tools
    "ruff>=0.4.0",
    "mypy>=1.10.0",
    "pre-commit>=3.7.0",
    # Testing framework
    "pytest>=8.1.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "coverage[toml]>=7.4.0",
    # Security scanning
    "bandit[toml]>=1.7.8",
    "safety>=3.1.0",
    "detect-secrets>=1.5.0",
    # Documentation
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.25.0",
    "python-lsp-server>=1.13.0",
    "python-lsp-black>=2.0.0",
    "python-lsp-ruff>=2.2.2",
    "httpx>=0.28.1",
]

# ================================================================================
# COVERAGE CONFIGURATION
# ================================================================================
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

# ================================================================================
# MYPY CONFIGURATION - PRAGMATIC SETTINGS
# ================================================================================
[tool.mypy]
python_version = "3.12"

# Explicit package base to fix module path issues
explicit_package_bases = true
mypy_path = ["src"]

# RELAXED settings for real-world development
disallow_untyped_defs = false          # Don't require types everywhere
disallow_incomplete_defs = false       # Allow partial typing
warn_return_any = false                # Don't warn about Any
warn_unused_ignores = false            # Don't warn about unused ignores
disallow_untyped_decorators = false    # Don't require decorator typing

# Keep these - they catch real bugs
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Useful settings
ignore_missing_imports = true
show_error_codes = true
pretty = true

exclude = ["docs/", "build/", "dist/", ".venv/"]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
warn_return_any = false

# ================================================================================
# RUFF CONFIGURATION - PRAGMATIC LINTING
# ================================================================================
[tool.ruff]
target-version = "py312"
line-length = 88

[tool.ruff.format]
# Ruff formatting (replaces Black)
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
select = [
    "E4",   # Import errors only
    "E7",   # Statement errors only
    "E9",   # Runtime errors only
    "F",    # Pyflakes (undefined vars, unused imports)
    "I",    # Import sorting
    "B",    # Bugbear (likely bugs)
    "S",    # Security issues
    "UP",   # Deprecated syntax
]

ignore = [
    "E501",    # Line too long (handled by formatter)
    "S101",    # Use of assert (fine in development)
    "S105",    # Hardcoded password (too many false positives)
    "S106",    # Hardcoded password (too many false positives)
    "S107",    # Hardcoded password (too many false positives)
    "B008",    # Function calls in defaults (sometimes needed)
]

exclude = [
    ".git",
    "__pycache__",
    "venv",
    ".venv",
    "build",
    "dist",
    "docs",
    "*.egg-info",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "B018", "B011"]  # Be lenient in tests
"scripts/*" = ["S603", "S607"]        # Allow subprocess in scripts

# ================================================================================
# BANDIT SECURITY CONFIGURATION
# ================================================================================
[tool.bandit]
exclude_dirs = ["tests", "docs", "venv", ".venv"]
skips = [
    "B101",  # assert_used (fine in development)
    "B601",  # paramiko_calls (sometimes needed)
    "B602",  # subprocess with shell (sometimes needed)
]

# ================================================================================
# PYTEST CONFIGURATION
# ================================================================================
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --cov=src --cov-report=html --cov-report=term-missing"
asyncio_mode = "auto"
