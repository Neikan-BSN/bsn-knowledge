# Pre-commit hooks for BSN Knowledge Base
# Task Group 1 foundation validation patterns - Updated with standardization alignment
# Optimized for Knowledge Base System with Python 3.12.10 + UV package management

# Performance and behavior settings
fail_fast: false  # Check all hooks even if one fails
default_stages: [commit]
minimum_pre_commit_version: '3.0.0'

# CI optimization - skip slow hooks in CI environments
ci:
  skip: 
    - hadolint-docker     # Slow container linting (handled in CI pipeline)
    - bandit-security     # Handled in CI pipeline
  autofix_prs: true
  autofix_commit_msg: "style: auto-fix pre-commit hooks ü§ñ"

repos:
  # =============================================================================
  # PYTHON 3.12 ENVIRONMENT VALIDATION
  # =============================================================================
  - repo: local
    hooks:
      - id: python-version-check
        name: "üêç Python 3.12.10 Enforcement"
        entry: bash
        language: system
        pass_filenames: false
        args:
          - -c
          - |
            PYTHON_VERSION=$(python --version 2>&1 | cut -d' ' -f2)
            MAJOR_MINOR=$(echo $PYTHON_VERSION | cut -d'.' -f1,2)
            PATCH=$(echo $PYTHON_VERSION | cut -d'.' -f3)
            
            if [[ "$MAJOR_MINOR" != "3.12" ]]; then
              echo "‚ùå Python 3.12.x required, found $PYTHON_VERSION"
              echo "üí° Install: uv python install 3.12"
              exit 1
            fi
            
            if [[ "$PATCH" < "4" ]]; then
              echo "‚ö†Ô∏è  Python 3.12.4+ recommended, found $PYTHON_VERSION"
              echo "üí° Upgrade: uv python install 3.12.10"
            fi
            
            echo "‚úÖ Python $PYTHON_VERSION (3.12.x series) validated"

  # UV Package Management Validation
  - repo: local
    hooks:
      - id: uv-environment-check
        name: "üì¶ UV Environment Validation"
        entry: bash
        language: system
        pass_filenames: false
        args:
          - -c
          - |
            # Check for canonical .venv directory
            if [[ ! -d ".venv" ]]; then
              echo "‚ùå Canonical .venv not found"
              echo "üí° Run: make install or uv sync --all-groups"
              exit 1
            fi
            
            # Check for UV installation
            if ! command -v uv &> /dev/null; then
              echo "‚ùå UV package manager not found"
              echo "üí° Install: curl -LsSf https://astral.sh/uv/install.sh | sh"
              exit 1
            fi
            
            # Validate pyproject.toml compatibility
            if [[ -f "pyproject.toml" ]]; then
              uv check > /dev/null 2>&1 || {
                echo "‚ö†Ô∏è  pyproject.toml compatibility issues detected"
                echo "üí° Run: uv sync to resolve dependencies"
              }
            fi
            
            echo "‚úÖ UV environment validated"

  # =============================================================================
  # RUFF UNIFIED TOOLING (Replaces Black + parts of MyPy + Flake8)
  # =============================================================================
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.6.9
    hooks:
      # Critical linting issues (blocking)
      - id: ruff
        name: "üîç Ruff Linting (Critical Issues)"
        args: 
          - --select=E9,F,B,S  # Error, pyflakes, bugbear, security
          - --ignore=B008,S314,S324,B017  # Allow common FastAPI patterns
          - --fix
        types: [python]

      # Code formatting (auto-fix enabled)
      - id: ruff-format
        name: "üé® Ruff Formatting (Python 3.12)"
        args:
          - --target-version=py312
        types: [python]

  # Enhanced Ruff configuration for knowledge base projects
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.6.9
    hooks:
      # Type checking integration (optional, enable for strict projects)
      - id: ruff
        name: "üîç Ruff Type Checking (Knowledge Base)"
        args:
          - --select=PYI,TCH,UP  # Type checking rules
          - --target-version=py312
        types: [python]
        stages: [manual]  # Run manually with: pre-commit run --hook-stage manual

  # =============================================================================
  # TYPE CHECKING - MyPy Integration
  # =============================================================================
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.7.1
    hooks:
      - id: mypy
        name: "üè∑Ô∏è MyPy Type Checking"
        additional_dependencies: [types-all, types-requests, types-pyyaml, types-redis]
        args: [--ignore-missing-imports, --show-error-codes]

  # =============================================================================
  # SECURITY SCANNING - Lightweight Integration
  # =============================================================================
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        name: "üîç Bandit Security Scan"
        args: [-c, .bandit]

  # Secrets detection with baseline management
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.5.0
    hooks:
      - id: detect-secrets
        name: "üïµÔ∏è Secrets Detection"
        args: 
          - --baseline
          - .secrets.baseline
          - --disable-plugin
          - KeywordDetector  # Reduce false positives
        exclude: |
          (?x)^(
              .*\.lock$|
              .*\.log$|
              .*\.min\.js$|
              tests/.*fixtures.*|
              data/.*
          )$

  # Basic credential pattern detection
  - repo: local
    hooks:
      - id: credential-patterns
        name: "üîê Basic Credential Pattern Check"
        entry: bash
        language: system
        types: [text]
        args:
          - -c
          - |
            # Check for common credential patterns
            if grep -r -i --include="*.py" --include="*.yaml" --include="*.yml" \
              -E "(password|secret|token|key)\s*[:=]\s*['\"][^'\"]*['\"]" . | \
              grep -v "placeholder\|example\|test\|dummy"; then
              echo "‚ö†Ô∏è  Potential credentials detected in code"
              echo "üí° Use environment variables or Doppler for secrets"
              exit 1
            fi
            echo "‚úÖ No credential patterns detected"

  # =============================================================================
  # BASIC FILE HYGIENE
  # =============================================================================
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: trailing-whitespace
        name: "üßπ Remove Trailing Whitespace"
      - id: end-of-file-fixer
        name: "üìù Fix End of Files"
      - id: check-yaml
        name: "üìã YAML Validation"
        exclude: '^\.pre-commit-config\.yaml$'
      - id: check-json
        name: "üìã JSON Validation"
      - id: check-toml
        name: "üìã TOML Validation"
      - id: check-added-large-files
        name: "üìè Large File Check"
        args: [--maxkb=1000]

  # Python-specific file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: check-ast
        name: "üêç Python AST Validation"
      - id: check-docstring-first
        name: "üìñ Docstring First Check"
      - id: debug-statements
        name: "üêõ Debug Statement Check"
      - id: check-merge-conflict
        name: "üîÄ Merge Conflict Check"
      - id: requirements-txt-fixer
        name: "üì¶ Requirements.txt Fixer"

  # =============================================================================
  # KNOWLEDGE BASE SPECIFIC HOOKS
  # =============================================================================
  
  # Dockerfile linting for knowledge base containers
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        name: "üê≥ Dockerfile Linting"
        entry: hadolint
        language: docker_image
        files: Dockerfile.*

  # YAML formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        name: "üé® YAML/JSON Formatting"
        files: \.(yaml|yml|json)$

  # Docker Compose validation
  - repo: local
    hooks:
      - id: docker-compose-check
        name: "üê≥ Validate docker-compose.yml"
        entry: docker-compose
        language: system
        args: [config, -q]
        files: docker-compose\.yml$

  # Knowledge Base Content Validation
  - repo: local
    hooks:
      - id: knowledge-base-validation
        name: "üìö Knowledge Base Content Validation"
        entry: bash
        language: system
        files: \.(py|md|json|yaml)$
        args:
          - -c
          - |
            echo "üìö Validating knowledge base content structure..."
            
            # Check for sensitive data patterns in content
            if grep -r -i -E "(ssn|social.*security|credit.*card|medical.*record)" src/ data/ 2>/dev/null | grep -v "test\|example"; then
              echo "üö® Potential sensitive data found in knowledge base content"
              echo "üí° Remove or encrypt sensitive information"
              exit 1
            fi
            
            # Check for proper API endpoint security
            if [ -d "src/bsn_knowledge/api" ]; then
              if grep -r -E "@app\.(get|post|put|delete)" src/bsn_knowledge/api/ | grep -v -E "auth|secure|permission"; then
                echo "‚ö†Ô∏è API endpoints without security patterns detected"
                echo "üí° Ensure proper authentication and authorization"
              fi
            fi
            
            echo "‚úÖ Knowledge base content validation completed"

  # =============================================================================
  # MCP ECOSYSTEM VALIDATION (Optional)
  # =============================================================================
  - repo: local
    hooks:
      - id: mcp-config-validation
        name: "üîó MCP Configuration Validation"
        entry: bash
        language: system
        files: '.*mcp.*\.(json|yaml|yml)$'
        args:
          - -c
          - |
            # Validate MCP configuration files
            for file in "$@"; do
              if [[ "$file" == *.json ]]; then
                python -m json.tool "$file" > /dev/null || {
                  echo "‚ùå Invalid JSON in MCP config: $file"
                  exit 1
                }
              elif [[ "$file" == *.yaml ]] || [[ "$file" == *.yml ]]; then
                python -c "import yaml; yaml.safe_load(open('$file'))" || {
                  echo "‚ùå Invalid YAML in MCP config: $file"
                  exit 1
                }
              fi
            done
            echo "‚úÖ MCP configurations validated"
        stages: [manual]  # Enable for MCP-integrated projects

  # =============================================================================
  # WORKSPACE INTEGRATION HOOKS
  # =============================================================================
  - repo: local
    hooks:
      - id: quality-gates-pre-commit
        name: "üõ°Ô∏è Quality Gates Pre-commit Check"
        entry: bash
        language: system
        pass_filenames: false
        args:
          - -c
          - |
            # Run lightweight quality gates validation
            if [[ -f "Makefile" ]] && grep -q "quality-gate-1" Makefile; then
              echo "üö™ Running Quality Gate 1 (Environment)..."
              make quality-gate-1 > /dev/null || {
                echo "‚ùå Quality Gate 1 failed"
                exit 1
              }
              echo "‚úÖ Quality Gate 1 passed"
            fi
        stages: [manual]  # Enable for projects with quality gates