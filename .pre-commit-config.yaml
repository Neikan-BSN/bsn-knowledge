# BSN Knowledge - Streamlined Pre-commit Configuration
# Focus: Medical/Educational Platform Quality Enforcement
# Philosophy: 8 essential hooks that prevent real issues, not quality theater

# Performance settings
fail_fast: false
default_stages: [pre-commit]
minimum_pre_commit_version: "3.0.0"

# CI optimization
ci:
  autofix_prs: true
  autofix_commit_msg: "style: auto-fix pre-commit hooks ü§ñ"

repos:
  # =============================================================================
  # 1. RUFF - Unified Python tooling (replaces Black, Flake8, isort, pyupgrade)
  # =============================================================================
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.12.11
    hooks:
      # All-in-one linting and fixing
      - id: ruff
        name: "üîç Ruff Linting + Auto-fix"
        args:
          - --fix
          - --exit-non-zero-on-fix
          - --target-version=py312
        types: [python]

      # Code formatting
      - id: ruff-format
        name: "üé® Ruff Formatting"
        args:
          - --target-version=py312
        types: [python]

  # =============================================================================
  # 2. SAFETY - Dependency vulnerability scanning (critical for medical platform)
  # =============================================================================
  - repo: local
    hooks:
      - id: safety-check
        name: "üõ°Ô∏è Dependency Security Scan"
        entry: bash
        language: system
        files: ^(requirements.*\.txt|pyproject\.toml)$
        args:
          - -c
          - |
            echo "üîç Running dependency security scan..."
            if command -v uv >/dev/null 2>&1; then
              # Use UV's built-in security scanning if available
              uv pip check || echo "‚ö†Ô∏è Some dependency issues detected"
            elif command -v safety >/dev/null 2>&1; then
              # Fallback to safety if installed
              safety check --ignore=70612 --short-report || echo "‚ö†Ô∏è Security scan completed with warnings"
            else
              echo "‚ÑπÔ∏è No security scanner available - install safety for vulnerability checking"
            fi
            echo "‚úÖ Security scan completed"

  # =============================================================================
  # 3. FILE HYGIENE - Essential file cleanliness
  # =============================================================================
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v6.0.0
    hooks:
      - id: trailing-whitespace
        name: "üßπ Remove Trailing Whitespace"
      - id: end-of-file-fixer
        name: "üìù Fix End of Files"
      - id: check-added-large-files
        name: "üìè Large File Check"
        args: [--maxkb=1000]

  # =============================================================================
  # 4. SECRETS DETECTION - HIPAA compliance critical
  # =============================================================================
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.5.0
    hooks:
      - id: detect-secrets
        name: "üïµÔ∏è Secrets Detection"
        args:
          - --baseline
          - .secrets.baseline
          - --disable-plugin
          - KeywordDetector  # Reduce medical terminology false positives
        exclude: |
          (?x)^(
              .*\.lock$|
              .*\.log$|
              tests/.*fixtures.*|
              data/.*test.*
          )$

  # =============================================================================
  # 5. DEAD CODE DETECTION - Remove unused medical calculations and logic
  # =============================================================================
  - repo: https://github.com/jendrikseipp/vulture
    rev: v2.14
    hooks:
      - id: vulture
        name: "üßπ Dead Code Detection"
        args:
          - --min-confidence=80
          - --exclude=tests/
        types: [python]

  # =============================================================================
  # 6. SPELL CHECK - Medical accuracy in documentation/comments
  # =============================================================================
  - repo: https://github.com/codespell-project/codespell
    rev: v2.4.1
    hooks:
      - id: codespell
        name: "üìù Spell Check"
        args:
          - --write-changes
          - --ignore-words-list=nd,ans,hist,te,ba,teh
        exclude: |
          (?x)^(
              .*\.lock$|
              .*\.min\.js$|
              data/vectors/.*
          )$

  # =============================================================================
  # 7. API SCHEMA VALIDATION - Prevent breaking changes
  # =============================================================================
  - repo: local
    hooks:
      - id: api-schema-validation
        name: "üîó API Schema Validation"
        entry: bash
        language: system
        files: '^(src/.*api.*\.py|openapi\.json)$'
        args:
          - -c
          - |
            # Validate OpenAPI schema if it exists
            if [[ -f "openapi.json" ]]; then
              echo "üîç Validating OpenAPI schema..."
              python -c "
            import json
            try:
                with open('openapi.json') as f:
                    schema = json.load(f)
                    if 'openapi' not in schema:
                        raise ValueError('Missing OpenAPI version')
                    if 'paths' not in schema:
                        raise ValueError('Missing API paths')
                print('‚úÖ OpenAPI schema valid')
            except Exception as e:
                print(f'‚ùå OpenAPI schema error: {e}')
                exit(1)
              "
            fi

            # Check for common FastAPI security patterns
            if find src/ -name "*.py" -exec grep -l "FastAPI\|@app\." {} \; | head -1 | xargs grep -L "Depends\|Security" 2>/dev/null; then
              echo "‚ö†Ô∏è  FastAPI endpoints found without security patterns"
              echo "üí° Consider adding authentication/authorization"
            fi

  # =============================================================================
  # 8. CRITICAL PERFORMANCE PATTERNS - Medical systems need speed
  # =============================================================================
  - repo: local
    hooks:
      - id: performance-patterns-check
        name: "‚ö° Critical Performance Patterns"
        entry: bash
        language: system
        types: [python]
        args:
          - -c
          - |
            # Check for performance anti-patterns
            performance_issues=0

            # N+1 query patterns
            if grep -r "for.*in.*:" src/ | grep -E "(query|select|find)" | head -3; then
              echo "‚ö†Ô∏è  Potential N+1 query pattern detected"
              ((performance_issues++))
            fi

            # Blocking sleep in async functions
            if grep -r -A 2 "async def" src/ | grep -B 2 -E "(time\.sleep|threading\.Event)" | head -3; then
              echo "‚ùå Blocking sleep in async function - use asyncio.sleep"
              ((performance_issues++))
            fi

            # Large data loading in loops
            if grep -r -E "for.*json\.load|for.*pd\.read|for.*\.query" src/ | head -3; then
              echo "‚ö†Ô∏è  Potential inefficient data loading in loop"
              ((performance_issues++))
            fi

            if [[ $performance_issues -gt 0 ]]; then
              echo "üí° Consider batching, caching, or async patterns"
            else
              echo "‚úÖ No critical performance anti-patterns detected"
            fi