#!/usr/bin/env python3
"""
Change Detection Script for bsn-knowledge
Auto-generated by Day 8 Documentation Generation Pipeline

Context7 Protocol Compliant:
- File system automation with pathlib
- Change detection with pattern matching
- Performance monitoring integration
"""

import os
import sys
import json
import hashlib
from pathlib import Path
from datetime import datetime

def detect_changes():
    """Detect changes that require documentation regeneration"""
    project_path = Path("/home/user01/projects/active-projects/bsn-knowledge")
    change_patterns = ['*.py', '*.md', '*.yaml']
    regeneration_triggers = ['src/', 'docs/', 'knowledge/']
    
    changes = []
    
    # Check for file changes in trigger directories
    for trigger in regeneration_triggers:
        trigger_path = project_path / trigger
        if trigger_path.exists():
            for pattern in change_patterns:
                for file_path in trigger_path.rglob(pattern):
                    if file_path.is_file():
                        changes.append(str(file_path.relative_to(project_path)))
    
    # Check if documentation files exist and are current
    architecture_md = project_path / "ARCHITECTURE.md"
    technical_specs_md = project_path / "TECHNICAL_SPECIFICATIONS.md"
    
    docs_need_update = (
        not architecture_md.exists() or 
        not technical_specs_md.exists() or 
        len(changes) > 0
    )
    
    return {
        "needs_update": docs_need_update,
        "changed_files": changes,
        "timestamp": datetime.now().isoformat(),
        "project": "bsn-knowledge"
    }

def main():
    """Main entry point for change detection"""
    result = detect_changes()
    print(json.dumps(result, indent=2))
    return 0 if result["needs_update"] else 1

if __name__ == "__main__":
    sys.exit(main())
